#!/usr/bin/env python3
"""
Telegram Bot Proxy –¥–ª—è Rello Mini App
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ API
"""

import os
import json
import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')
API_URL = os.getenv('API_URL', 'https://arkhiptsev.com/api/leads/create/')
API_TOKEN = os.getenv('API_TOKEN', 'O2EZjvewEsiLytylbDT7ioDiJLheh2cZJDWuqQvtYmtW1BZetj7ylKimJBQUTTqM')


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–∏–µ–º–∞ –∑–∞—è–≤–æ–∫ –∏–∑ Rello Mini App.\n\n'
        '–û—Ç–∫—Ä–æ–π—Ç–µ Mini App —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –Ω–∏–∂–µ.'
    )


async def handle_web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Web App"""
    logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    logger.info("üîî –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï WEB_APP_DATA!")
    logger.info("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App
        web_app_data = update.effective_message.web_app_data.data
        logger.info(f"üì¶ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App: {web_app_data}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        user = update.effective_user
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram: ID={user.id}, username={user.username}, "
                   f"first_name={user.first_name}, last_name={user.last_name}")
        
        # –ü–∞—Ä—Å–∏–º JSON –∏–∑ —Ñ–æ—Ä–º—ã
        form_data = json.loads(web_app_data)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã: {form_data}")
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ: –±–µ—Ä–µ–º first_name –∏ last_name –∏–∑ Telegram
        lead_data = {
            'first_name': user.first_name or '',
            'last_name': user.last_name or '',
            'phone': form_data.get('phone', ''),
            'telegram': form_data.get('telegram', '') or (f"@{user.username}" if user.username else ''),
            'client_language': form_data.get('client_language', 'ru'),
            'description': form_data.get('description', ''),
            'comment': form_data.get('comment', '')
        }
        
        logger.info(f"–ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API: {lead_data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ API
        headers = {
            'Authorization': f'Bearer {API_TOKEN}',
            'Content-Type': 'application/json'
        }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ API: {API_URL}")
        response = requests.post(API_URL, json=lead_data, headers=headers)
        
        logger.info(f"–û—Ç–≤–µ—Ç API: {response.status_code} - {response.text}")
        
        if response.status_code == 201:
            response_data = response.json()
            lead_id = response_data.get('lead_id')
            
            await update.effective_message.reply_text(
                f'‚úÖ –ó–∞—è–≤–∫–∞ #{lead_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n'
                f'–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.'
            )
        else:
            logger.error(f"–û—à–∏–±–∫–∞ API: {response.text}")
            await update.effective_message.reply_text(
                '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏.\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            )
            
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        await update.effective_message.reply_text(
            '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö.'
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        await update.effective_message.reply_text(
            '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        )


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        logger.error("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_web_app_data))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == '__main__':
    main()

